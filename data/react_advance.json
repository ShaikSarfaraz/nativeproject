{
    "context_api_and_state_management": [
      {
        "question": "What is the Context API, and how does it work?",
        "answer": "Context API manages global state without passing props manually (prop drilling).",
        "how_it_works": [
          "Create Context",
          "Provide Context Value",
          "Consume Context in Components"
        ],
        "example": {
          "code": [
            "import { createContext, useContext, useState } from 'react';",
            "// 1️⃣ Create Context",
            "const ThemeContext = createContext();",
            "export function ThemeProvider({ children }) {",
            "  const [theme, setTheme] = useState('light');",
            "  return (",
            "    <ThemeContext.Provider value={{ theme, setTheme }}>",
            "      {children}",
            "    </ThemeContext.Provider>",
            "  );",
            "}",
            "// 2️⃣ Consume Context in Child Component",
            "export function ThemedButton() {",
            "  const { theme, setTheme } = useContext(ThemeContext);",
            "  return (",
            "    <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>",
            "      Switch to {theme === 'light' ? 'Dark' : 'Light'} Mode",
            "    </button>",
            "  );",
            "}"
          ]
        },
        "use_case": "Avoids prop drilling & improves code maintainability"
      },
      {
        "question": "What is the difference between Context API and Redux?",
        "answer": {
          "Context_API": {
            "use_case": "Simple global state",
            "performance": "Rerenders all consumers",
            "middleware_support": "No built-in support"
          },
          "Redux": {
            "use_case": "Large-scale applications",
            "performance": "Uses selectors for better optimization",
            "middleware_support": "Supports middlewares (Redux-Thunk, Redux-Saga)"
          }
        },
        "recommendation": "Use Context API for small apps, Redux for complex state management"
      },
      {
        "question": "What are the drawbacks of Context API?",
        "answer": [
          "Performance issues if too many components rerender.",
          "No built-in devtools like Redux.",
          "Difficult to handle complex async logic (Redux handles better)."
        ],
        "recommendation": "For better performance, use Context with useReducer()"
      }
    ],
    "react_performance_optimization": [
      {
        "question": "How do you optimize React performance?",
        "answer": [
          "Avoid unnecessary re-renders (React.memo, useCallback, useMemo)",
          "Code Splitting & Lazy Loading (React.lazy(), Suspense)",
          "Optimize List Rendering (use key prop)",
          "Minimize expensive computations (useMemo())"
        ],
        "example": {
          "code": [
            "const MemoizedComponent = React.memo(({ count }) => {",
            "  console.log('Rendered!');",
            "  return <h1>Count: {count}</h1>;",
            "});",
            "const App = () => <MemoizedComponent count={5} />;"
          ]
        }
      },
      {
        "question": "What is React.memo, and when should you use it?",
        "answer": "React.memo memoizes functional components, preventing unnecessary re-renders if props haven't changed.",
        "use_case": [
          "Component re-renders often",
          "Props remain unchanged"
        ],
        "example": {
          "code": [
            "const MemoizedComponent = React.memo(({ name }) => {",
            "  console.log('Rendered!');",
            "  return <h1>Hello, {name}</h1>;",
            "});"
          ]
        }
      },
      {
        "question": "What is useMemo, and how does it improve performance?",
        "answer": "useMemo caches the result of an expensive computation to prevent unnecessary recalculations.",
        "example": {
          "code": [
            "import { useMemo } from 'react';",
            "function ExpensiveComponent({ number }) {",
            "  const computedValue = useMemo(() => {",
            "    console.log('Expensive calculation...');",
            "    return number * 2;",
            "  }, [number]);",
            "  return <h1>Computed Value: {computedValue}</h1>;",
            "}"
          ]
        },
        "use_case": "Only recalculates when number changes"
      },
      {
        "question": "What is useCallback, and when should you use it?",
        "answer": "useCallback memoizes functions so they aren't recreated on every render.",
        "example": {
          "code": [
            "import { useCallback } from 'react';",
            "function Parent({ handleClick }) {",
            "  return <button onClick={handleClick}>Click me</button>;",
            "}",
            "function App() {",
            "  const memoizedHandleClick = useCallback(() => {",
            "    console.log('Button clicked!');",
            "  }, []);",
            "  return <Parent handleClick={memoizedHandleClick} />;",
            "}"
          ]
        },
        "use_case": "Prevents unnecessary function recreation"
      }
    ],
    "redux_and_advanced_state_management": [
      {
        "question": "What is Redux, and why is it used?",
        "answer": "Redux is a predictable state management library for managing global application state.",
        "redux_components": [
          "Store: Holds the application state.",
          "Actions: Describe what happened ({ type: 'INCREMENT' }).",
          "Reducers: Determine how state changes."
        ]
      },
      {
        "question": "How does the Redux data flow work?",
        "answer": [
          "Dispatch an action",
          "Reducer processes action & updates state",
          "Store holds the updated state",
          "Components subscribe & re-render"
        ],
        "use_case": "Single source of truth & predictable state updates"
      },
      {
        "question": "How do you set up Redux in a React project?",
        "answer": [
          "1️⃣ Install Redux & React-Redux: npm install redux react-redux",
          "2️⃣ Create Reducer: const counterReducer = (state = 0, action) => { switch (action.type) { case 'INCREMENT': return state + 1; default: return state; } };",
          "3️⃣ Create Store: import { createStore } from 'redux'; const store = createStore(counterReducer);",
          "4️⃣ Provide Store to App: import { Provider } from 'react-redux'; function App() { return (<Provider store={store}><Counter /></Provider>); }",
          "5️⃣ Dispatch Actions in Components: import { useDispatch, useSelector } from 'react-redux'; function Counter() { const count = useSelector(state => state); const dispatch = useDispatch(); return (<div><h1>{count}</h1><button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button></div>); }"
        ],
        "use_case": "Redux makes state predictable & manageable"
      },
      {
        "question": "What is Redux Thunk, and why is it needed?",
        "answer": "Redux Thunk allows async operations (API calls) inside Redux actions.",
        "example": {
          "code": [
            "import { createStore, applyMiddleware } from 'redux';",
            "import thunk from 'redux-thunk';",
            "const fetchData = () => {",
            "  return async (dispatch) => {",
            "    const response = await fetch('https://jsonplaceholder.typicode.com/posts');",
            "    const data = await response.json();",
            "    dispatch({ type: 'FETCH_SUCCESS', payload: data });",
            "  };",
            "};",
            "const store = createStore(reducer, applyMiddleware(thunk));"
          ]
        },
        "use_case": "Handles async actions in Redux"
      },
      {
        "question": "What is Redux Toolkit, and how is it different from Redux?",
        "answer": "Redux Toolkit (RTK) simplifies Redux setup & development.",
        "key_differences": [
          {"feature": "Boilerplate Code", "redux": "High", "redux_toolkit": "Low"},
          {"feature": "Async Support", "redux": "Redux Thunk", "redux_toolkit": "Built-in createAsyncThunk"},
          {"feature": "Store Setup", "redux": "Manual", "redux_toolkit": "configureStore()"}
        ],
        "use_case": "RTK is the recommended way to use Redux"
      }
    ],
    "final_thoughts": "These React Advanced Topics interview questions cover Context API vs. Redux, React Performance Optimization (Memoization, Lazy Loading, useMemo, useCallback), Redux & Advanced State Management"
  }
  