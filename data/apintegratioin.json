{
    "authentication_API_Integration": {
      "1": {
        "question": "What are the best practices for securely integrating APIs in a React app?",
        "answer": [
          "Use environment variables for API keys (.env file)",
          "Store tokens in HTTP-only cookies (not localStorage!)",
          "Handle errors with proper status codes (401, 403, 500)",
          "Use interceptors for automated authentication handling"
        ],
        "example": {
          "env_variable": "REACT_APP_API_BASE_URL=https://api.example.com",
          "react_code": "const API_URL = process.env.REACT_APP_API_BASE_URL;"
        }
      },
      "2": {
        "question": "How do you handle authentication using JWT in React?",
        "answer": [
          "Backend issues JWT Token after login",
          "Frontend sends token in API calls (using Axios interceptors)",
          "Token is stored securely in cookies, preventing XSS attacks"
        ],
        "example": {
          "backend_code": "const token = jwt.sign(user, 'secretKey', { expiresIn: '1h' });",
          "frontend_code": "axios.interceptors.request.use((config) => { config.withCredentials = true; return config; });"
        }
      },
      "3": {
        "question": "How do you check if a user is authenticated on the frontend?",
        "answer": [
          "Check authentication on page load by verifying the token",
          "Use Context API for global auth state"
        ],
        "example": {
          "check_auth_code": "const response = await axios.get('/api/auth-status');",
          "context_code": "export function useAuth() { return useContext(AuthContext); }"
        }
      },
      "4": {
        "question": "How do you protect routes in a React app?",
        "answer": [
          "Use a Higher-Order Component (HOC) or Custom Hook to protect routes"
        ],
        "example": {
          "route_code": "<Route path='/dashboard' element={<PrivateRoute><Dashboard /></PrivateRoute>} />"
        }
      }
    },
    "role-Based_Access_Control": {
      "5": {
        "question": "What is RBAC, and why is it important?",
        "answer": [
          "RBAC restricts access to specific pages or actions based on the user's role",
          "Benefits include security and scalability"
        ],
        "example": [
          "Admins can manage users",
          "Editors can publish content",
          "Customers can only view orders"
        ]
      },
      "6": {
        "question": "How do you implement RBAC in React?",
        "answer": [
          "Backend includes user role in JWT token",
          "Frontend stores and uses role information",
          "Restrict access based on role"
        ],
        "example": {
          "backend_code": "const token = jwt.sign(user, 'secretKey', { expiresIn: '1h' });",
          "frontend_code": "axios.get('/api/user-role').then((res) => setRole(res.data.role));"
        }
      },
      "7": {
        "question": "How do you restrict API access based on roles in the backend?",
        "answer": [
          "Use middleware to check user role before processing API request"
        ],
        "example": {
          "middleware_code": "function authorize(allowedRoles) { return (req, res, next) => { const userRole = req.user.role; if (!allowedRoles.includes(userRole)) { return res.status(403).json({ message: 'Access Denied' }); } next(); }; }"
        }
      }
    },
    "secure_API_Error_Handling_and_Logout": {
      "8": {
        "question": "How do you handle API authentication errors properly?",
        "answer": [
          "Standardized error handling for API responses",
          "Handle expired token errors in frontend"
        ],
        "example": {
          "error_handling_code": "app.use((err, req, res, next) => { console.error(err.stack); res.status(500).json({ message: 'Something went wrong!' }); });",
          "axios_response_code": "axios.interceptors.response.use(null, (error) => { if (error.response.status === 401) { logoutUser(); } });"
        }
      },
      "9": {
        "question": "How do you implement a secure logout mechanism?",
        "answer": [
          "Backend clears the HTTP-only cookie",
          "Frontend calls logout API and redirects"
        ],
        "example": {
          "backend_code": "app.post('/logout', (req, res) => { res.clearCookie('token'); res.json({ message: 'Logged out' }); });",
          "frontend_code": "function logoutUser() { axios.post('/logout').then(() => { window.location.href = '/login'; }); }"
        }
      }
    },
    "deployment_and_Security_Best_Practices": {
      "10": {
        "question": "What are the best security practices for API authentication & RBAC?",
        "answer": [
          "Use HTTPS (Encrypts all requests)",
          "Secure cookies (HTTP-only, SameSite, Secure flags)",
          "Token expiry & refresh tokens",
          "Limit API rate using middleware"
        ],
        "example": {
          "rate_limit_code": "const apiLimiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }); app.use('/api/', apiLimiter);"
        }
      }
    },
    "fina_Thoughts": {
      "summary": [
        "Secure Authentication (JWT, HTTP-Only Cookies, OAuth)",
        "Role-Based Access Control (RBAC) for Different User Roles",
        "Protecting Routes & API Endpoints in React & Express",
        "Error Handling, Logout, and Security Best Practices"
      ]
    }
  }
  