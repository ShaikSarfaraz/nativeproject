{
  "authentication_API_Integration": {
      "question": "What are the best practices for securely integrating APIs in a React app?",
      "answer": [
          "Use environment variables for API keys (.env file)",
          "Store tokens in HTTP-only cookies (not localStorage!)",
          "Handle errors with proper status codes (401, 403, 500)",
          "Use interceptors for automated authentication handling"
      ]
  },
  "authentication_JWT": {
      "question": "How do you handle authentication using JWT in React?",
      "answer": [
          "Backend issues JWT Token after login",
          "Frontend sends token in API calls (using Axios interceptors)",
          "Token is stored securely in cookies, preventing XSS attacks"
      ]
  },
  "authentication_Check": {
      "question": "How do you check if a user is authenticated on the frontend?",
      "answer": [
          "Check authentication on page load by verifying the token",
          "Use Context API for global auth state"
      ]
  },
  "route_Protection": {
      "question": "How do you protect routes in a React app?",
      "answer": [
          "Use a Higher-Order Component (HOC) or Custom Hook to protect routes"
      ]
  },
  "RBAC_Definition": {
      "question": "What is RBAC, and why is it important?",
      "answer": [
          "RBAC restricts access to specific pages or actions based on the user's role",
          "Benefits include security and scalability"
      ]
  },
  "RBAC_Implementation": {
      "question": "How do you implement RBAC in React?",
      "answer": [
          "Backend includes user role in JWT token",
          "Frontend stores and uses role information",
          "Restrict access based on role"
      ]
  },
  "RBAC_API_Access": {
      "question": "How do you restrict API access based on roles in the backend?",
      "answer": [
          "Use middleware to check user role before processing API request"
      ]
  },
  "API_Error_Handling": {
      "question": "How do you handle API authentication errors properly?",
      "answer": [
          "Standardized error handling for API responses",
          "Handle expired token errors in frontend"
      ]
  }
}
